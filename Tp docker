## Partie 1

**Premi√®re √©tape j ai install√© docker en suivant la doc officiel :**
```bash
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
```      


üåû **Utiliser la commande `docker run`**

**J ai ensuite cr√©e un conteneur** 

``` bash
Sudo docker run --name web -d -p 9999:80 nginx
```

comme t as demand√© j ai lanc√© avec un partage de port avec le port 9999 redirig√© vers le port 80

**J ai donc ensuite obtenue l id du conteneur:**
```
b2c2dc5138425c9d15f4539a0f289e4aa1c0074df490210783cc87aca57be131
```


üåû **Rendre le service dispo sur internet**

**J'ai rajout√© un param√®tre dans les r√©glages r√©seau pour ajouter le port 9999**

**J'ai donc pu curl et acc√©der √† l'interface web:**
``` bash
curl http:52.224.242.182//:9999
```

``` html
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
```


üåû **Custom un peu le lancement du conteneur**

Maintenant on vas custom tout ca hein..

d√©j√† je vais cr√©e le r√©pertoire pour stocker la conf et les fichiers du site

``` bash
mkdir -p ~/nginx_custom/html ~/nginx_custom/conf
```

dans le r√©pertoire je met mon petit fichier custom

```bash
echo "<h1>Bienvenue ici tu es chez moi. !</h1>" > ~/nginx_custom/html/index.html
```

bien mtn qu on a fais ca je vais cr√©e un fichier custom conf pour √©couter sur le port 7777
``` 
nano ~/nginx_custom/conf/custom.conf
```

et j ai mis la conf que tu nous as donn√© dedans 
```
server {
    listen 7777;
    root /var/www/tp_docker;
    index index.html;
}
```

bon j avoue que pour cette partie je me suis un peu fait aider, ducoup j ai relanc√© le conteneur en montant les fichiers personnalis√© dedans (j ai du le faire 5 fois avant que ca marche)

```bash
docker run --name meow -d \
  -v ~/nginx_custom/html:/var/www/tp_docker \
  -v $(realpath ~/nginx_custom/conf/custom.conf):/etc/nginx/conf.d/custom.conf \
  -p 8888:7777 \
  --memory="512m" \
  nginx
```


Bon le moment de v√©rit√© je curl avec l ip publique et le port 8888 pour voir si le site est accessible 

```bash
curl http://52.224.242.182:8888
```

et sa me retourne bien ma conf perso
```
C:\Users\touff>curl http://52.224.242.182:8888
<h1>Bienvenue ici tu es chez moi. \!</h1>
```


## Partie 2

Je vais commencer par cr√©e le r√©pertoire adequat 

```bash
mkdir ~/apache_custom && cd ~/apache_custom
```

je fais un petit fichier html personnalis√© 

```bash
echo "<h1>Bienvenue etre humain</h1>" > index.html
```

On cr√©e ensuite le fichier de conf apache

```
nano apache2.conf
```


et on vas mettre notre petite conf dedans

```bash
Listen 80

LoadModule mpm_event_module "/usr/lib/apache2/modules/mod_mpm_event.so"
LoadModule dir_module "/usr/lib/apache2/modules/mod_dir.so"
LoadModule authz_core_module "/usr/lib/apache2/modules/mod_authz_core.so"

DirectoryIndex index.html
DocumentRoot "/var/www/html/"

ErrorLog "/var/log/apache2/error.log"
LogLevel warn
```


Maintenant on passe √† notre petit docker file on vas donc cr√©e le fichier

```
nano Dockerfile
```

on met notre conf dedans 

```bash
FROM debian:latest

RUN apt update -y && apt install -y apache2

COPY index.html /var/www/html/index.html

COPY apache2.conf /etc/apache2/apache2.conf

CMD [ "/usr/sbin/apache2ctl", "-D", "FOREGROUND" ]
```

on cr√©e mtn l image personnalis√©

```bash
docker build . -t my_apache
```

des que le build se finis j obtient ceci

```
root@test:~/apache_custom# docker build . -t my_apache
[+] Building 29.2s (9/9) FINISHED                                                                                          docker:default
 => [internal] load build definition from Dockerfile                                                                                 0.0s
 => => transferring dockerfile: 242B                                                                                                 0.0s
 => [internal] load metadata for docker.io/library/debian:latest                                                                     0.1s
 => [internal] load .dockerignore                                                                                                    0.0s
 => => transferring context: 2B                                                                                                      0.0s
 => [1/4] FROM docker.io/library/debian:latest@sha256:35286826a88dc879b4f438b645ba574a55a14187b483d09213a024dc0c0a64ed               3.9s
 => => resolve docker.io/library/debian:latest@sha256:35286826a88dc879b4f438b645ba574a55a14187b483d09213a024dc0c0a64ed               0.1s
 => => sha256:0cc7b2132ebf8d535c3a8efd12be46902dd58c496dae66c478a6e64d9588a38d 1.02kB / 1.02kB                                       0.0s
 => => sha256:d4ccddb816ba27eaae22ef3d56175d53f47998e2acb99df1ae0e5b426b28a076 453B / 453B                                           0.0s
 => => sha256:155ad54a8b2812a0ec559ff82c0c6f0f0dddb337a226b11879f09e15f67b69fc 48.48MB / 48.48MB                                     1.1s
 => => sha256:35286826a88dc879b4f438b645ba574a55a14187b483d09213a024dc0c0a64ed 8.52kB / 8.52kB                                       0.0s
 => => extracting sha256:155ad54a8b2812a0ec559ff82c0c6f0f0dddb337a226b11879f09e15f67b69fc                                            2.1s
 => [internal] load build context                                                                                                    0.0s
 => => transferring context: 104B                                                                                                    0.0s
 => [2/4] RUN apt update -y && apt install -y apache2                                                                               21.1s
 => [3/4] COPY index.html /var/www/html/index.html                                                                                   0.2s
 => [4/4] COPY apache2.conf /etc/apache2/apache2.conf                                                                                0.1s
 => exporting to image                                                                                                               3.5s
 => => exporting layers                                                                                                              3.4s
 => => writing image sha256:e58291beb4b188866a02ff1b25b68bc5f9f95f2b68e804e48bae6815bbe752d8                                         0.0s
 => => naming to docker.io/library/my_apache    
```

le build a donc fonctionn√©

je v√©rifie ensuite que l image a bien √©tait cr√©e

```
root@test:~/apache_custom# docker images
REPOSITORY   TAG       IMAGE ID       CREATED              SIZE
my_apache    latest    e58291beb4b1   About a minute ago   253MB
nginx        latest    b52e0b094bc0   5 weeks ago          192MB
```

L image est bien pr√©sente.

Maintenant je lance mon conteneur

```bash
docker run --name apache_custom -d -p 8080:80 my_apache
```

Je curl pour v√©rifi√© l'acc√®s

```bash
root@test:~/apache_custom# curl http://52.224.242.182:8080
<h1>Bienvenue etre humain</h1>
```

Le site est accessible tout fonctionne (j aime tellement quand √ßa marche)



## Partie 3


